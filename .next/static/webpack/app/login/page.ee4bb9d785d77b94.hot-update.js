"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/login/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyticsApi: () => (/* binding */ analyticsApi),\n/* harmony export */   authApi: () => (/* binding */ authApi),\n/* harmony export */   categoriesApi: () => (/* binding */ categoriesApi),\n/* harmony export */   handleApiError: () => (/* binding */ handleApiError),\n/* harmony export */   reservationsApi: () => (/* binding */ reservationsApi),\n/* harmony export */   resourcesApi: () => (/* binding */ resourcesApi),\n/* harmony export */   transactionsApi: () => (/* binding */ transactionsApi)\n/* harmony export */ });\n/* harmony import */ var _hooks_use_toast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/hooks/use-toast */ \"(app-pages-browser)/./hooks/use-toast.ts\");\n\nconst API_URL = \"http://localhost:3001/api\" || 0;\nasync function fetchWithAuth(url) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    // Get the token from localStorage (in a real app, you might use a more secure method)\n    const token =  true ? localStorage.getItem(\"token\") : 0;\n    // Set up headers with authentication\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        ...token ? {\n            Authorization: \"Bearer \".concat(token)\n        } : {},\n        ...options.headers\n    };\n    try {\n        const response = await fetch(\"\".concat(API_URL).concat(url), {\n            ...options,\n            headers\n        });\n        // If the response is not ok, throw an error\n        if (!response.ok) {\n            // Check if it's an auth error\n            if (response.status === 401) {\n                // Clear token and redirect to login\n                if (true) {\n                    localStorage.removeItem(\"token\");\n                    window.location.href = \"/login\";\n                }\n            }\n            // Try to get error details from the response\n            const errorData = await response.json().catch(()=>({}));\n            throw new Error(errorData.message || \"API error: \".concat(response.status));\n        }\n        // Parse JSON response\n        return await response.json();\n    } catch (error) {\n        console.error(\"API request failed:\", error);\n        // Re-throw the error for the caller to handle\n        throw error;\n    }\n}\n// Auth API calls\nconst authApi = {\n    login: async (email, password)=>{\n        return fetchWithAuth(\"/auth/login\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                email,\n                password\n            })\n        });\n    },\n    register: async (userData)=>{\n        return fetchWithAuth(\"/auth/register\", {\n            method: \"POST\",\n            body: JSON.stringify(userData)\n        });\n    },\n    getCurrentUser: async ()=>{\n        return fetchWithAuth(\"/auth/me\");\n    },\n    forgotPassword: async (email)=>{\n        return fetchWithAuth(\"/auth/forgot-password\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                email\n            })\n        });\n    }\n};\n// Resources API calls\nconst resourcesApi = {\n    getAllResources: async function() {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        // Convert params object to query string\n        const queryParams = new URLSearchParams();\n        Object.entries(params).forEach((param)=>{\n            let [key, value] = param;\n            if (value !== undefined && value !== null && value !== \"\") {\n                queryParams.append(key, String(value));\n            }\n        });\n        const queryString = queryParams.toString() ? \"?\".concat(queryParams.toString()) : \"\";\n        return fetchWithAuth(\"/resources\".concat(queryString));\n    },\n    getResourceById: async (id)=>{\n        return fetchWithAuth(\"/resources/\".concat(id));\n    },\n    createResource: async (resourceData)=>{\n        return fetchWithAuth(\"/resources\", {\n            method: \"POST\",\n            body: JSON.stringify(resourceData)\n        });\n    },\n    updateResource: async (id, resourceData)=>{\n        return fetchWithAuth(\"/resources/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify(resourceData)\n        });\n    },\n    deleteResource: async (id)=>{\n        return fetchWithAuth(\"/resources/\".concat(id), {\n            method: \"DELETE\"\n        });\n    },\n    getLowStockResources: async ()=>{\n        return fetchWithAuth(\"/resources/low-stock\");\n    },\n    getExpiringResources: async function() {\n        let days = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30;\n        return fetchWithAuth(\"/resources/expiry?days=\".concat(days));\n    }\n};\n// Categories API calls\nconst categoriesApi = {\n    getAllCategories: async ()=>{\n        return fetchWithAuth(\"/categories\");\n    },\n    getCategoryById: async (id)=>{\n        return fetchWithAuth(\"/categories/\".concat(id));\n    },\n    createCategory: async (categoryData)=>{\n        return fetchWithAuth(\"/categories\", {\n            method: \"POST\",\n            body: JSON.stringify(categoryData)\n        });\n    },\n    updateCategory: async (id, categoryData)=>{\n        return fetchWithAuth(\"/categories/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify(categoryData)\n        });\n    },\n    deleteCategory: async (id)=>{\n        return fetchWithAuth(\"/categories/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n};\n// Transactions API calls\nconst transactionsApi = {\n    getAllTransactions: async function() {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const queryParams = new URLSearchParams();\n        Object.entries(params).forEach((param)=>{\n            let [key, value] = param;\n            if (value !== undefined && value !== null && value !== \"\") {\n                queryParams.append(key, String(value));\n            }\n        });\n        const queryString = queryParams.toString() ? \"?\".concat(queryParams.toString()) : \"\";\n        return fetchWithAuth(\"/transactions\".concat(queryString));\n    },\n    getTransactionById: async (id)=>{\n        return fetchWithAuth(\"/transactions/\".concat(id));\n    },\n    createTransaction: async (transactionData)=>{\n        return fetchWithAuth(\"/transactions\", {\n            method: \"POST\",\n            body: JSON.stringify(transactionData)\n        });\n    },\n    updateTransactionStatus: async (id, statusData)=>{\n        return fetchWithAuth(\"/transactions/\".concat(id, \"/status\"), {\n            method: \"PUT\",\n            body: JSON.stringify(statusData)\n        });\n    },\n    getOverdueTransactions: async ()=>{\n        return fetchWithAuth(\"/transactions/overdue\");\n    },\n    getUserTransactions: async (userId)=>{\n        const queryString = userId ? \"?user_id=\".concat(userId) : \"\";\n        return fetchWithAuth(\"/transactions/user\".concat(queryString));\n    }\n};\n// Reservations API calls\nconst reservationsApi = {\n    getAllReservations: async function() {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const queryParams = new URLSearchParams();\n        Object.entries(params).forEach((param)=>{\n            let [key, value] = param;\n            if (value !== undefined && value !== null && value !== \"\") {\n                queryParams.append(key, String(value));\n            }\n        });\n        const queryString = queryParams.toString() ? \"?\".concat(queryParams.toString()) : \"\";\n        return fetchWithAuth(\"/reservations\".concat(queryString));\n    },\n    getReservationById: async (id)=>{\n        return fetchWithAuth(\"/reservations/\".concat(id));\n    },\n    createReservation: async (reservationData)=>{\n        return fetchWithAuth(\"/reservations\", {\n            method: \"POST\",\n            body: JSON.stringify(reservationData)\n        });\n    },\n    updateReservation: async (id, reservationData)=>{\n        return fetchWithAuth(\"/reservations/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify(reservationData)\n        });\n    },\n    cancelReservation: async (id, reason)=>{\n        return fetchWithAuth(\"/reservations/\".concat(id, \"/cancel\"), {\n            method: \"PUT\",\n            body: JSON.stringify({\n                reason\n            })\n        });\n    },\n    getUpcomingReservations: async ()=>{\n        return fetchWithAuth(\"/reservations/upcoming\");\n    },\n    getResourceAvailability: async (resourceId, date)=>{\n        return fetchWithAuth(\"/reservations/availability/\".concat(resourceId, \"?date=\").concat(date));\n    }\n};\n// Analytics API calls\nconst analyticsApi = {\n    getResourceUsage: async function() {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const queryParams = new URLSearchParams();\n        Object.entries(params).forEach((param)=>{\n            let [key, value] = param;\n            if (value !== undefined && value !== null && value !== \"\") {\n                queryParams.append(key, String(value));\n            }\n        });\n        const queryString = queryParams.toString() ? \"?\".concat(queryParams.toString()) : \"\";\n        return fetchWithAuth(\"/analytics/resource-usage\".concat(queryString));\n    },\n    getPopularResources: async function() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n        return fetchWithAuth(\"/analytics/popular-resources?limit=\".concat(limit));\n    },\n    getInventoryValueBreakdown: async ()=>{\n        return fetchWithAuth(\"/analytics/inventory-value\");\n    },\n    getUserActivity: async function() {\n        let days = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 30;\n        return fetchWithAuth(\"/analytics/user-activity?days=\".concat(days));\n    },\n    getDashboardStats: async ()=>{\n        return fetchWithAuth(\"/analytics/dashboard-stats\");\n    }\n};\n// Error handler utility that can be used throughout the app\nconst handleApiError = (error, customMessage)=>{\n    console.error(\"API Error:\", error);\n    // Show toast notification\n    (0,_hooks_use_toast__WEBPACK_IMPORTED_MODULE_0__.toast)({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: customMessage || error.message || \"An unexpected error occurred\"\n    });\n    return null;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});